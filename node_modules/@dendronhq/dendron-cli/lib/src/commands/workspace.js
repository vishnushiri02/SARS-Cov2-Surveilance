"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkspaceCLICommand = exports.Action = void 0;
const common_all_1 = require("@dendronhq/common-all");
const engine_server_1 = require("@dendronhq/engine-server");
const lodash_1 = __importDefault(require("lodash"));
const base_1 = require("./base");
const utils_1 = require("./utils");
var Action;
(function (Action) {
    Action["INIT"] = "init";
})(Action = exports.Action || (exports.Action = {}));
class WorkspaceCLICommand extends base_1.CLICommand {
    constructor() {
        super({ name: "workspace", desc: "workspace related methods" });
    }
    buildArgs(args) {
        super.buildArgs(args);
        args.option("action", {
            describe: "what action to execute",
            requiresArg: true,
            choices: Object.values(Action),
        });
        args.option("fromConfig", {
            describe: "initialize from dendron.yml",
            type: "boolean",
        });
    }
    async enrichArgs(args) {
        this.addArgsToPayload({ action: args.action });
        const engineArgs = await (0, utils_1.setupEngine)({ ...args, init: false });
        return { data: { ...args, ...engineArgs } };
    }
    async execute(opts) {
        const { action, fromConfig, wsRoot } = lodash_1.default.defaults(opts, {});
        switch (action) {
            case Action.INIT: {
                if (fromConfig) {
                    await engine_server_1.WorkspaceService.createFromConfig({ wsRoot });
                    return {};
                }
                else {
                    throw Error("this command is not supported yet");
                }
            }
            default: {
                throw new common_all_1.DendronError({ message: `unsupported action: ${action}` });
            }
        }
    }
}
exports.WorkspaceCLICommand = WorkspaceCLICommand;
//# sourceMappingURL=workspace.js.map