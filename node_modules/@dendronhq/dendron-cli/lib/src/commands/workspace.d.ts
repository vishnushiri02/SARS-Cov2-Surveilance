/// <reference types="node" />
import yargs from "yargs";
import { CLICommand, CommandCommonProps } from "./base";
declare type CommandCLIOpts = {
    wsRoot: string;
    fromConfig?: boolean;
    dryRun?: boolean;
    action: Action;
    useGithubAccessToken?: boolean;
};
declare type CommandOpts = CommandCLIOpts & CommandCommonProps;
export declare enum Action {
    INIT = "init"
}
export declare class WorkspaceCLICommand extends CLICommand<CommandOpts> {
    constructor();
    buildArgs(args: yargs.Argv): void;
    enrichArgs(args: CommandCLIOpts): Promise<{
        data: {
            wsRoot: string;
            engine: import("@dendronhq/common-all").DEngineClient;
            port: number;
            server: import("@dendronhq/api-server").Server;
            serverSockets?: Set<import("net").Socket> | undefined;
            fromConfig?: boolean | undefined;
            dryRun?: boolean | undefined;
            action: Action;
            useGithubAccessToken?: boolean | undefined;
        };
    }>;
    execute(opts: CommandOpts): Promise<{}>;
}
export {};
