#!/usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateSVG = void 0;
const common_all_1 = require("@dendronhq/common-all");
const fs_extra_1 = __importDefault(require("fs-extra"));
const react_1 = __importDefault(require("react"));
const server_1 = __importDefault(require("react-dom/server"));
const processDendronNotes_1 = require("./processDendronNotes");
const Tree_1 = require("./Tree");
const path_1 = __importDefault(require("path"));
function collectInput(args) {
    const rootPath = args.wsRoot;
    const maxDepth = 9;
    //TODO: Take path to customFileColors as a cli argument (as an added functionality)
    const customFileColors = {};
    const colorEncoding = "type";
    return {
        rootPath,
        maxDepth,
        colorEncoding,
        customFileColors,
    };
}
async function generateSVG(args) {
    const { /*rootPath*/ maxDepth, colorEncoding, customFileColors } = collectInput(args);
    const engine = args.engine;
    const Tree = await (0, Tree_1.createTree)();
    await Promise.all(engine.vaults.map(async (vault) => {
        /* Get stats of each note in the current vault */
        const data = await (0, processDendronNotes_1.processDir)({ rootPath: "root", engine, vault });
        const componentCodeString = server_1.default.renderToStaticMarkup(react_1.default.createElement(Tree, { data: data, maxDepth: +maxDepth, colorEncoding: colorEncoding, customFileColors: customFileColors }));
        const vaultName = common_all_1.VaultUtils.getName(vault);
        if (args.out) {
            await fs_extra_1.default.ensureDir(args.out);
        }
        const outputFile = path_1.default.join(args.out || args.wsRoot, `diagram-${vaultName}.svg`);
        await fs_extra_1.default.writeFile(outputFile, componentCodeString);
    }));
}
exports.generateSVG = generateSVG;
//# sourceMappingURL=dendron.js.map