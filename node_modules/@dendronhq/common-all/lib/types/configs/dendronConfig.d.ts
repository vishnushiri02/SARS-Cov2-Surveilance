import { DendronCommandConfig } from "./commands/commands";
import { DendronSeedEntry, DendronWorkspaceConfig, MetadataStoreType } from "./workspace/DendronWorkspaceConfig";
import { DendronPreviewConfig } from "./preview/preview";
import { DendronPublishingConfig, DuplicateNoteBehavior, GoogleAnalyticsConfig, HierarchyConfig, SearchMode, Theme } from "./publishing/publishing";
import { DendronGlobalConfig } from "./global/global";
import { DendronDevConfig, ForceWatcherType } from "./dev/DendronDevConfig";
import { CopyNoteLinkConfig, InsertNoteIndexConfig, InsertNoteLinkConfig, LookupConfig, RandomNoteConfig } from "./commands";
import { DendronWorkspaceEntry } from "../DendronWorkspaceEntry";
import { DVault } from "../DVault";
import { DHookDict } from "../hooks";
import { DendronGraphConfig, JournalConfig, ScratchConfig, TaskConfig } from "./workspace";
import { VaultSyncMode } from "./base";
import { GiscusConfig, GithubConfig, SEOConfig } from "./publishing";
/**
 * DendronConfig
 * This is the top level config that will hold everything.
 */
export declare type DendronConfig = {
    version: number;
    global?: DendronGlobalConfig;
    commands: DendronCommandConfig;
    workspace: DendronWorkspaceConfig;
    preview: DendronPreviewConfig;
    publishing: DendronPublishingConfig;
    dev?: DendronDevConfig;
};
export declare type TopLevelDendronConfig = keyof DendronConfig;
export declare type DendronConfigValue = string | boolean | number | DendronGlobalConfig | DendronCommandConfig | LookupConfig | RandomNoteConfig | InsertNoteLinkConfig | InsertNoteIndexConfig | CopyNoteLinkConfig | DendronWorkspaceConfig | {
    [key: string]: DendronWorkspaceEntry | undefined;
} | {
    [key: string]: DendronSeedEntry | undefined;
} | DVault[] | DHookDict | JournalConfig | ScratchConfig | TaskConfig | DendronGraphConfig | VaultSyncMode | MetadataStoreType | DendronPreviewConfig | Theme | DendronPublishingConfig | GoogleAnalyticsConfig | {
    [key: string]: HierarchyConfig;
} | DuplicateNoteBehavior | SEOConfig | GithubConfig | GiscusConfig | SearchMode | DendronDevConfig | ForceWatcherType;
/**
 * Generates a default DendronConfig using
 * respective default config generators of each sub config groups.
 * @returns DendronConfig
 */
export declare function genDefaultDendronConfig(): DendronConfig;
