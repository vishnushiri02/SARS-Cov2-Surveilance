"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PerformanceTimer = void 0;
const _ = __importStar(require("lodash"));
const timing_1 = require("../timing");
/**
 *  Performance timer utility class to make it easier to quickly add performance
 *  logging to code without having to add lots of variables to track timing state.
 *
 *  Usage example:
 *  const pt = PerformanceTimer();
 *
 *  pt.before('someFunc');
 *  someFunc();
 *  pt.after('someFunc');
 *
 *  pt.before('someOtherFunc');
 *  someOtherFunc();
 *  pt.after('someOtherFunc');
 *
 *  log.info({msg: pt.report()});
 *  */
class PerformanceTimer {
    constructor(opts) {
        this.opts = opts;
        this.beforeStampsMillis = new Map();
        this.timingsMillis = new Map();
        this.errors = [];
    }
    before(name) {
        if (this.beforeStampsMillis.has(name)) {
            this.errors.push(`Duplicate before() called with name='${name}'`);
        }
        else {
            this.beforeStampsMillis.set(name, (0, timing_1.milliseconds)());
        }
    }
    after(name) {
        const now = (0, timing_1.milliseconds)();
        const beforeStamp = this.beforeStampsMillis.get(name);
        // Before stamp should always be a non-zero millis value if we have
        // already called before() for the given name.
        if (beforeStamp) {
            if (this.timingsMillis.has(name)) {
                this.errors.push(`Duplicate recording of finishing name='${name}'`);
            }
            else {
                this.timingsMillis.set(name, now - beforeStamp);
            }
        }
        else {
            this.errors.push(`Called after() with non existent name='${name}'`);
        }
    }
    report() {
        var _a, _b;
        const report = [];
        if ((_a = this.opts) === null || _a === void 0 ? void 0 : _a.timerName) {
            report.push((_b = this.opts) === null || _b === void 0 ? void 0 : _b.timerName);
        }
        report.push(`Timings:`);
        report.push(Array.from(this.timingsMillis.keys())
            .map((name) => `${name}:${this.timingsMillis.get(name)}ms`)
            .join(" | "));
        report.push(` | Total: ${_.sum(Array.from(this.timingsMillis.values()))}ms`);
        if (this.errors.length) {
            report.push(`ERRORS FOUND:`);
            report.push(this.errors.join("|"));
        }
        return report.join(" ");
    }
}
exports.PerformanceTimer = PerformanceTimer;
//# sourceMappingURL=performanceTimer.js.map