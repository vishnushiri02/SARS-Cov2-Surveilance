"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.COMMANDS = exports.INSERT_NOTE_INDEX = exports.SELECTION_MODES = void 0;
const lookup_1 = require("../../types/configs/commands/lookup");
const insertNoteLink_1 = require("../../types/configs/commands/insertNoteLink");
/**
 * Lookup
 */
/**
 * Selection mode entries
 */
exports.SELECTION_MODES = {
    [lookup_1.LookupSelectionModeEnum.extract]: {
        value: lookup_1.LookupSelectionModeEnum.extract,
        label: "Extract Selection",
        desc: "Extract selection of active editor and use it as body of new note.",
    },
    [lookup_1.LookupSelectionModeEnum.link]: {
        value: lookup_1.LookupSelectionModeEnum.link,
        label: "Selection to Link",
        desc: "Use selection of active editor for the basename of the lookup value.",
    },
    [lookup_1.LookupSelectionModeEnum.none]: {
        value: lookup_1.LookupSelectionModeEnum.none,
        label: "None",
        desc: "Do not set selection mode",
    },
};
/**
 * Note lookup entry collection
 */
const NOTE = {
    selectionMode: exports.SELECTION_MODES,
    confirmVaultOnCreate: {
        label: "Confirm Vault on Create.",
        desc: "Prompt for vault selection when creating new note.",
    },
    vaultSelectionModeOnCreate: {
        label: "Vault Selection Mode On Note Creation.",
        desc: "Whether to smartly guess the vault for the note when creating new note.",
    },
    leaveTrace: {
        label: "Leave Trace",
        desc: "Leaves a reference of the destination note in the source note while using selectionExtract",
    },
    bubbleUpCreateNew: {
        label: "Bubble Up Create New",
        desc: "Put `Create New` at the top of the lookup result.",
    },
    fuzzThreshold: {
        label: "Fuzziness Threshold For Lookup",
        desc: "Sets the fuzziness level of lookup",
    },
};
/**
 * Lookup entry collection
 */
const LOOKUP = {
    note: NOTE,
};
/**
 * Random note
 */
/**
 * Random note entries
 */
const RANDOM_NOTE = {
    include: {
        label: "Hierarchies to Include",
        desc: "Hierarchies to include when opening a random note",
    },
    exclude: {
        label: "hierarchies to Exclude",
        desc: "Hierarchies not to include when opening a random note",
    },
};
/**
 * Insert note link
 */
/**
 * Insert note link alias mode entries
 */
const ALIAS_MODES = {
    [insertNoteLink_1.InsertNoteLinkAliasModeEnum.snippet]: {
        value: insertNoteLink_1.InsertNoteLinkAliasModeEnum.snippet,
        label: "Snippet Mode",
        desc: "Insert note link as snippet string",
    },
    [insertNoteLink_1.InsertNoteLinkAliasModeEnum.selection]: {
        value: insertNoteLink_1.InsertNoteLinkAliasModeEnum.selection,
        label: "Selection Mode",
        desc: "Extract selection and use as link alias",
    },
    [insertNoteLink_1.InsertNoteLinkAliasModeEnum.title]: {
        value: insertNoteLink_1.InsertNoteLinkAliasModeEnum.title,
        label: "Title Mode",
        desc: "Use linked note's title as link alias",
    },
    [insertNoteLink_1.InsertNoteLinkAliasModeEnum.prompt]: {
        value: insertNoteLink_1.InsertNoteLinkAliasModeEnum.prompt,
        label: "Prompt Mode",
        desc: "Prompt for input to be used as link alias",
    },
    [insertNoteLink_1.InsertNoteLinkAliasModeEnum.none]: {
        value: insertNoteLink_1.InsertNoteLinkAliasModeEnum.none,
        label: "No Alias Mode",
        desc: "Do not add link alias",
    },
};
/**
 * Insert note link entries
 */
const INSERT_NOTE_LINK = {
    aliasMode: ALIAS_MODES,
    enableMultiSelect: {
        label: "Enable Multi-select",
        desc: "Enable multi-select when inserting note links",
    },
};
/**
 * Insert note index
 */
/**
 * Insert note index entries
 */
exports.INSERT_NOTE_INDEX = {
    enableMarker: {
        label: `Enable Marker`,
        desc: `Insert note index between autogenerated markers`,
    },
};
const COPY_NOTE_LINK = {
    nonNoteFile: {
        label: "Non-note file",
        desc: "Copy note link settings for non-note files.",
    },
    aliasMode: {
        label: "Include a note link",
        desc: "Whether or not to include alias when copying a note link",
    },
};
/**
 * Command entry collection
 */
exports.COMMANDS = {
    lookup: LOOKUP,
    randomNote: RANDOM_NOTE,
    insertNoteLink: INSERT_NOTE_LINK,
    insertNoteIndex: exports.INSERT_NOTE_INDEX,
    copyNoteLink: COPY_NOTE_LINK,
    templateHierarchy: {
        label: "The hierarchy where template notes will be stored",
        desc: "Default is 'template'",
    },
};
//# sourceMappingURL=commands.js.map