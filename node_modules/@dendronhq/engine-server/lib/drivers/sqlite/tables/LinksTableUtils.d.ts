import { DLink, NotePropsMeta, ResultAsync } from "@dendronhq/common-all";
import { Database } from "sqlite3";
import { SqliteError } from "../SqliteError";
export declare type LinkType = "ref" | "wiki" | "md" | "linkCandidate" | "frontmatterTag" | "child";
export declare class LinksTableRow {
    source: string;
    sink: string;
    type: LinkType;
    sinkFname?: string | undefined;
    sinkVaultName?: string | undefined;
    payload?: DLink | undefined;
    constructor(source: string, // NOTE: These are ID's, not fnames!
    sink: string, // NOTE: These are ID's, not fnames!
    type: LinkType, sinkFname?: string | undefined, sinkVaultName?: string | undefined, payload?: DLink | undefined);
}
export declare type LinksTableRowWithSinkAsFname = Omit<LinksTableRow, "sink"> & {
    sinkFname: string;
};
export declare class LinksTableUtils {
    static createTable(db: Database): ResultAsync<null, SqliteError>;
    static insert(db: Database, row: LinksTableRow): ResultAsync<null, SqliteError>;
    static bulkInsertLinkWithSinkAsFname(db: Database, data: LinksTableRowWithSinkAsFname[]): ResultAsync<null, SqliteError>;
    static bulkInsertLinkCandidatesWithSinkAsFname(db: Database, data: LinksTableRowWithSinkAsFname[]): ResultAsync<null, SqliteError>;
    static InsertLinksThatBecameAmbiguous(db: Database, data: {
        fname: string;
        id: string;
    }[]): ResultAsync<null, SqliteError>;
    /**
     * Use this method when you have the ID of the source and the fname of the
     * sink. This method will lookup into the NoteProps table to get ID's for the
     * sink (if any valid ID's exist). This is
     */
    static insertLinkWithSinkAsFname(db: Database, data: LinksTableRowWithSinkAsFname): ResultAsync<null, SqliteError>;
    /**
     *  For a note ID, get anything that shows up in NotePropsMeta.links (this
     *  includes forward and backlinks, excludes parent/children)
     * @param db
     * @param noteId
     * @returns
     */
    static getAllDLinks(db: Database, noteId: string): ResultAsync<DLink[], SqliteError>;
    static delete(db: Database, source: string): ResultAsync<null, SqliteError>;
    static updateUnresolvedLinksForAddedNotes(db: Database, addedNotes: NotePropsMeta[], vaultNameOfNotesGettingAdded: string): ResultAsync<null, SqliteError>;
    static getSQLValueForLinkType(type: LinkType): number;
}
