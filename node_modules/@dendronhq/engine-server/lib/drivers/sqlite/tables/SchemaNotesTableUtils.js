"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SchemaNotesTableUtils = exports.SchemaNotesTableRow = void 0;
const common_all_1 = require("@dendronhq/common-all");
const SqliteQueryUtils_1 = require("../SqliteQueryUtils");
const SqliteTypeUtils_1 = require("../SqliteTypeUtils");
class SchemaNotesTableRow {
    constructor(noteId, moduleId, schemaId) {
        this.noteId = noteId;
        this.moduleId = moduleId;
        this.schemaId = schemaId;
    }
}
exports.SchemaNotesTableRow = SchemaNotesTableRow;
class SchemaNotesTableUtils {
    static createTable(db) {
        const sql = `
    CREATE TABLE IF NOT EXISTS SchemaNotes (
      noteId TEXT NOT NULL,
      moduleId TEXT NOT NULL,
      schemaId TEXT NOT NULL,
      PRIMARY KEY (noteId, moduleId, schemaId),
      FOREIGN KEY(noteId) REFERENCES NoteProps(id) ON DELETE CASCADE);`;
        return SqliteQueryUtils_1.SqliteQueryUtils.run(db, sql);
    }
    static insert(db, row) {
        const sql = `
    INSERT OR IGNORE INTO SchemaNotes (noteId, moduleId, schemaId)
    VALUES (
      ${(0, SqliteTypeUtils_1.getSQLValueString)(row.noteId)},
      ${(0, SqliteTypeUtils_1.getSQLValueString)(row.moduleId)},
      ${(0, SqliteTypeUtils_1.getSQLValueString)(row.schemaId)})`;
        const prom = new Promise((resolve, reject) => {
            db.run(sql, (err) => {
                if (err) {
                    reject(err.message);
                }
                else {
                    resolve(null);
                }
            });
        });
        return common_all_1.ResultAsync.fromPromise(prom, (e) => {
            return e;
        });
    }
    static truncate(db) {
        const sql = `DELETE FROM SchemaNotes`;
        return SqliteQueryUtils_1.SqliteQueryUtils.run(db, sql);
    }
    static getByNoteId(db, key) {
        const sql = [
            `SELECT *`,
            `FROM SchemaNotes`,
            `WHERE SchemaNotes.noteId = "${key}"`,
        ].join("\n");
        return SqliteQueryUtils_1.SqliteQueryUtils.get(db, sql);
    }
}
exports.SchemaNotesTableUtils = SchemaNotesTableUtils;
//# sourceMappingURL=SchemaNotesTableUtils.js.map