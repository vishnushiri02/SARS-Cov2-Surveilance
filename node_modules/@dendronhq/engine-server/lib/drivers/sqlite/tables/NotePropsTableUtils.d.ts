import { NotePropsMeta, ResultAsync } from "@dendronhq/common-all";
import { Database } from "sqlite3";
import { SqliteError } from "../SqliteError";
export declare class NotePropsTableRow {
    id: string;
    fname: string;
    title: string;
    description: string;
    updated: number;
    created: number;
    anchors: string;
    stub: number;
    custom: string;
    contentHash: string;
    color: string;
    image: string;
    traits: string;
    constructor(id: string, fname: string, title: string, description: string, updated: number, created: number, anchors: string, stub: number, custom: string, contentHash: string, color: string, image: string, traits: string);
}
export declare class NotePropsTableUtils {
    /**
     * Create the NoteProps table in the given sqlite database
     * @param db
     * @returns
     */
    static createTable(db: Database): ResultAsync<null, SqliteError>;
    /**
     * Get a row by the note id
     * @param db
     * @param id
     * @returns ResultAsync containing the NotePropsTableRow if it exists,
     * otherwise null if a row with the id doesn't exist.
     */
    static getById(db: Database, id: string): ResultAsync<NotePropsTableRow | null, SqliteError>;
    /**
     * Get all rows by fname
     * @param db
     * @param fname
     * @returns
     */
    static getByFname(db: Database, fname: string): ResultAsync<NotePropsTableRow[], SqliteError>;
    static getHashByFnameAndVaultId(db: Database, fname: string, vaultId: number): ResultAsync<string | null, SqliteError>;
    /**
     * Insert a NoteProp object in the NoteProps sqlite table
     * @param db
     * @param row
     * @returns
     */
    static insert(db: Database, row: NotePropsMeta): ResultAsync<null, SqliteError>;
    static delete(db: Database, key: string): ResultAsync<null, SqliteError>;
    private static getSQLInsertString;
}
