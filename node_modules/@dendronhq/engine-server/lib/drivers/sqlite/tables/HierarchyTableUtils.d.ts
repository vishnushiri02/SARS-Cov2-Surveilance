import { DLogger, DNodePointer, ResultAsync } from "@dendronhq/common-all";
import { Database } from "sqlite3";
import { SqliteError } from "../SqliteError";
export declare class HierarchyTableRow {
    parentId: string;
    childId: string;
    constructor(parentId: string, childId: string);
}
export declare class HierarchyTableUtils {
    static createTable(db: Database): ResultAsync<null, SqliteError>;
    static insert(db: Database, row: HierarchyTableRow): ResultAsync<null, SqliteError>;
    static bulkInsert(db: Database, rows: HierarchyTableRow[]): ResultAsync<null, SqliteError>;
    static insertWithParentAsFname(db: Database, childId: string, parentFname: string, vaultId: number): ResultAsync<null, SqliteError>;
    static bulkInsertWithParentAsFname(db: Database, data: {
        childId: string;
        parentFname: string;
        vaultId: number;
    }[]): ResultAsync<null, SqliteError>;
    static getChildren(db: Database, noteId: string): ResultAsync<DNodePointer[], SqliteError>;
    static getParent(db: Database, noteId: string): ResultAsync<DNodePointer | null, SqliteError>;
    /**
     * Given a node,
     * recursively grab all descendants of the node
     * until we run out
     *
     * return all (parentId, childId) pairs
     *
     * This is done in a breadth-first manner.
     *
     * more on recursive CTEs: https://www.sqlite.org/lang_with.html
     */
    static getAllDescendants(db: Database, nodeId: string, logger?: DLogger): ResultAsync<HierarchyTableRow[], SqliteError>;
}
