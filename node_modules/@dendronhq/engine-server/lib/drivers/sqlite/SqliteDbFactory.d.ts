import { DLogger, DVault, IDendronError, IFileStore, ResultAsync, SchemaModuleDict } from "@dendronhq/common-all";
import { Database } from "sqlite3";
/**
 * Factory methods to create a SQLite database
 */
export declare class SqliteDbFactory {
    /**
     * This creates a SQLite database AND also initializes it with all notes that
     * are a part of the passed in vaults
     * @param wsRoot
     * @param vaults
     * @param fileStore
     * @param dbFilePath - path of the db file. Use :memory: to use an in-memory database
     * @returns
     */
    static createInitializedDB(wsRoot: string, vaults: DVault[], fileStore: IFileStore, dbFilePath: string, logger: DLogger): ResultAsync<Database, Error>;
    /**
     * This method will create a sqlite database with the table schema created,
     * but no initial data is added. Useful for tests.
     * @param dbFilePath - path of the db file. Use :memory: to use an in-memory database
     * @returns
     */
    static createEmptyDB(dbFilePath: string): ResultAsync<Database, Error>;
    static initSchema(vaults: DVault[], wsRoot: string, fileStore: IFileStore, logger: DLogger): ResultAsync<SchemaModuleDict, IDendronError>;
}
