"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const base_1 = __importDefault(require("./base"));
const record_1 = __importDefault(require("./record"));
const table_1 = __importDefault(require("./table"));
const airtable_error_1 = __importDefault(require("./airtable_error"));
class Airtable {
    constructor(opts = {}) {
        const defaultConfig = Airtable.default_config();
        const apiVersion = opts.apiVersion || Airtable.apiVersion || defaultConfig.apiVersion;
        Object.defineProperties(this, {
            _apiKey: {
                value: opts.apiKey || Airtable.apiKey || defaultConfig.apiKey,
            },
            _apiVersion: {
                value: apiVersion,
            },
            _apiVersionMajor: {
                value: apiVersion.split('.')[0],
            },
            _customHeaders: {
                value: opts.customHeaders || {},
            },
            _endpointUrl: {
                value: opts.endpointUrl || Airtable.endpointUrl || defaultConfig.endpointUrl,
            },
            _noRetryIfRateLimited: {
                value: opts.noRetryIfRateLimited ||
                    Airtable.noRetryIfRateLimited ||
                    defaultConfig.noRetryIfRateLimited,
            },
            _requestTimeout: {
                value: opts.requestTimeout || Airtable.requestTimeout || defaultConfig.requestTimeout,
            },
        });
        if (!this._apiKey) {
            throw new Error('An API key is required to connect to Airtable');
        }
    }
    base(baseId) {
        return base_1.default.createFunctor(this, baseId);
    }
    static default_config() {
        return {
            endpointUrl: process.env.AIRTABLE_ENDPOINT_URL || 'https://api.airtable.com',
            apiVersion: '0.1.0',
            apiKey: process.env.AIRTABLE_API_KEY,
            noRetryIfRateLimited: false,
            requestTimeout: 300 * 1000,
        };
    }
    static configure({ apiKey, endpointUrl, apiVersion, noRetryIfRateLimited, requestTimeout, }) {
        Airtable.apiKey = apiKey;
        Airtable.endpointUrl = endpointUrl;
        Airtable.apiVersion = apiVersion;
        Airtable.noRetryIfRateLimited = noRetryIfRateLimited;
        Airtable.requestTimeout = requestTimeout;
    }
    static base(baseId) {
        return new Airtable().base(baseId);
    }
}
Airtable.Base = base_1.default;
Airtable.Record = record_1.default;
Airtable.Table = table_1.default;
Airtable.Error = airtable_error_1.default;
module.exports = Airtable;
//# sourceMappingURL=airtable.js.map