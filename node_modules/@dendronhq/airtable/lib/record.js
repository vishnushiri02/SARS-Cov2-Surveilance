"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const callback_to_promise_1 = __importDefault(require("./callback_to_promise"));
class Record {
    constructor(table, recordId, recordJson) {
        this._table = table;
        this.id = recordId || recordJson.id;
        this.setRawJson(recordJson);
        this.save = callback_to_promise_1.default(save, this);
        this.patchUpdate = callback_to_promise_1.default(patchUpdate, this);
        this.putUpdate = callback_to_promise_1.default(putUpdate, this);
        this.destroy = callback_to_promise_1.default(destroy, this);
        this.fetch = callback_to_promise_1.default(fetch, this);
        this.updateFields = this.patchUpdate;
        this.replaceFields = this.putUpdate;
    }
    getId() {
        return this.id;
    }
    get(columnName) {
        return this.fields[columnName];
    }
    set(columnName, columnValue) {
        this.fields[columnName] = columnValue;
    }
    setRawJson(rawJson) {
        this._rawJson = rawJson;
        this.fields = (this._rawJson && this._rawJson.fields) || {};
    }
}
function save(done) {
    this.putUpdate(this.fields, done);
}
function patchUpdate(cellValuesByName, opts, done) {
    if (!done) {
        done = opts;
        opts = {};
    }
    const updateBody = {
        fields: cellValuesByName,
        ...opts,
    };
    this._table._base.runAction('patch', `/${this._table._urlEncodedNameOrId()}/${this.id}`, {}, updateBody, (err, response, results) => {
        if (err) {
            done(err);
            return;
        }
        this.setRawJson(results);
        done(null, this);
    });
}
function putUpdate(cellValuesByName, opts, done) {
    if (!done) {
        done = opts;
        opts = {};
    }
    const updateBody = {
        fields: cellValuesByName,
        ...opts,
    };
    this._table._base.runAction('put', `/${this._table._urlEncodedNameOrId()}/${this.id}`, {}, updateBody, (err, response, results) => {
        if (err) {
            done(err);
            return;
        }
        this.setRawJson(results);
        done(null, this);
    });
}
function destroy(done) {
    this._table._base.runAction('delete', `/${this._table._urlEncodedNameOrId()}/${this.id}`, {}, null, err => {
        if (err) {
            done(err);
            return;
        }
        done(null, this);
    });
}
function fetch(done) {
    this._table._base.runAction('get', `/${this._table._urlEncodedNameOrId()}/${this.id}`, {}, null, (err, response, results) => {
        if (err) {
            done(err);
            return;
        }
        this.setRawJson(results);
        done(null, this);
    });
}
module.exports = Record;
//# sourceMappingURL=record.js.map