import { DendronConfig, DNoteRefLink, DNoteRefLinkRaw, DVault, NoteProps, DendronASTDest } from "@dendronhq/common-all";
import { Heading, Image, Parent, Root } from "mdast";
import { Processor } from "unified";
import { DendronPubOpts } from "./remark/dendronPub";
import { WikiLinksOpts } from "./remark/wikiLinks";
export { Node as UnistNode } from "unist";
export { VFile } from "vfile";
export { Processor };
export { DendronASTDest };
export declare type DendronASTRoot = Root & {
    children: DendronASTNode;
};
export declare type WikiLinkProps = {
    alias: string;
    value: string;
    anchorHeader?: string;
};
export declare type DendronASTNode = Parent & {
    notes?: NoteProps[];
    children?: Parent["children"] | DendronASTNode[];
};
export declare enum DendronASTTypes {
    WIKI_LINK = "wikiLink",
    REF_LINK_V2 = "refLinkV2",
    BLOCK_ANCHOR = "blockAnchor",
    HASHTAG = "hashtag",
    USERTAG = "usertag",
    EXTENDED_IMAGE = "extendedImage",
    ROOT = "root",
    HEADING = "heading",
    LIST = "list",
    LIST_ITEM = "listItem",
    PARAGRAPH = "paragraph",
    TEXT = "text",
    TABLE = "table",
    TABLE_ROW = "tableRow",
    TABLE_CELL = "tableCell",
    IMAGE = "image",
    FRONTMATTER = "yaml",
    LINK = "link",
    CODE = "code",
    INLINE_CODE = "inlineCode",
    FOOTNOTE_DEFINITION = "footnoteDefinition",
    FOOTNOTE_REFERENCE = "footnoteReference",
    HTML = "html",
    YAML = "yaml"
}
export declare enum VaultMissingBehavior {
    FALLBACK_TO_ORIGINAL_VAULT = 0,
    THROW_ERROR = 1
}
export declare type DendronASTData = {
    dest: DendronASTDest;
    vault: DVault;
    fname: string;
    wikiLinkOpts?: WikiLinksOpts;
    config: DendronConfig;
    overrides?: Partial<DendronPubOpts>;
    shouldApplyPublishRules?: boolean;
    /**
     * Inidicate that we are currently inside a note ref
     */
    insideNoteRef?: boolean;
};
export declare type WikiLinkNoteV4 = Omit<DendronASTNode, "children"> & {
    type: DendronASTTypes.WIKI_LINK;
    value: string;
    data: WikiLinkDataV4;
};
export declare type WikiLinkDataV4 = {
    alias: string;
    anchorHeader?: string;
    prefix?: string;
    vaultName?: string;
    /** Denotes a same file link, for example `[[#anchor]]` */
    sameFile?: boolean;
};
export declare type RehypeLinkData = WikiLinkDataV4 & {
    hName: string;
};
export declare type NoteRefNoteV4 = Omit<DendronASTNode, "children"> & {
    type: DendronASTTypes.REF_LINK_V2;
    value: string;
    data: NoteRefDataV4;
};
export declare type NoteRefNoteRawV4 = Omit<DendronASTNode, "children"> & {
    type: DendronASTTypes.REF_LINK_V2;
    value: string;
    data: NoteRefDataRawV4;
};
export declare type NoteRefDataV4 = {
    link: DNoteRefLink;
    vaultName?: string;
};
export declare type NoteRefDataRawV4 = {
    link: DNoteRefLinkRaw;
    vaultName?: string;
};
export declare type BlockAnchor = DendronASTNode & {
    type: DendronASTTypes.BLOCK_ANCHOR;
    id: string;
};
/** Hashtag tags, like `#foo.bar`, a shorthand for `[[tags.foo.bar]]` */
export declare type HashTag = DendronASTNode & {
    type: DendronASTTypes.HASHTAG;
    /** The fname that the hashtag actually references, like `tags.foo.bar` */
    fname: string;
    /** The full test of the hashtag, like `#foo.bar` */
    value: string;
};
/** User tags, like `@Hamilton.Margaret`, a shorthand for `[[user.Hamilton.Margaret]]` */
export declare type UserTag = DendronASTNode & {
    type: DendronASTTypes.USERTAG;
    /** The fname that the hashtag actually references, like `user.Hamilton.Margaret` */
    fname: string;
    /** The full test of the hashtag, like `@Hamilton.Margaret` */
    value: string;
};
export declare type Anchor = BlockAnchor | Heading;
export declare type ExtendedImage = DendronASTNode & Image & {
    /** User provided props, to set things like width and height. */
    props: {
        [key: string]: any;
    };
};
