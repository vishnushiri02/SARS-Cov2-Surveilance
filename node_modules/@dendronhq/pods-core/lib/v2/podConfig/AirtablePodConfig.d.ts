import { JSONSchemaType } from "ajv";
import { SrcFieldMapping } from "../../builtin/AirtablePod";
import { AirtableConnection } from "../external-services/AirtableConnection";
import { ExternalTarget } from "../external-services/ExternalConnectionManager";
import { ExportPodConfigurationV2 } from "./PodV2Types";
/**
 * Defines filters for export pod
 */
export declare type ExportPodConfigurationFilterV2 = {
    /**
     * Glob patterns to filter from
     */
    fname: string[];
};
/**
 * Complete Pod Config for Airtable V2
 */
export declare type AirtableV2PodConfig = ExportPodConfigurationV2 & {
    baseId: string;
    tableName: string;
    sourceFieldMapping: {
        [key: string]: SrcFieldMapping;
    };
    filters?: ExportPodConfigurationFilterV2;
};
/**
 * This is the persisted version of the config that gets serialized into a YAML
 * file. It must contain a reference to an airtable connection ID.
 */
export declare type PersistedAirtablePodConfig = AirtableV2PodConfig & Pick<ExternalTarget, "connectionId">;
/**
 * This is the set of parameters required for actual execution of the Pod
 */
export declare type RunnableAirtableV2PodConfig = Omit<AirtableV2PodConfig, "description" | "podType"> & Pick<AirtableConnection, "apiKey">;
/**
 * Helper function to perform a type check on an object to see if it's an
 * instance of {@link RunnableAirtableV2PodConfig}
 * @param object
 * @returns
 */
export declare function isRunnableAirtableV2PodConfig(object: any): object is RunnableAirtableV2PodConfig;
export declare function createRunnableAirtableV2PodConfigSchema(): JSONSchemaType<RunnableAirtableV2PodConfig>;
