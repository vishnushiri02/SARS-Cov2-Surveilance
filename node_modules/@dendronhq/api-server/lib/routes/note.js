"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.noteRouter = void 0;
const common_server_1 = require("@dendronhq/common-server");
const express_1 = require("express");
const express_async_handler_1 = __importDefault(require("express-async-handler"));
const notes_1 = require("../modules/notes");
const utils_1 = require("../utils");
const router = (0, express_1.Router)();
exports.noteRouter = router;
router.get("/get", (0, express_async_handler_1.default)(async (req, res) => {
    // TODO: All of these 'as unknown as foo' calls are problematic - we can
    // never guarantee that the correct parameters get passed over to the API.
    // We need more robust input checking at this API layer.
    const { id, ws } = req.query;
    const engine = await (0, utils_1.getWSEngine)({ ws: ws || "" });
    common_server_1.ExpressUtils.setResponse(res, await engine.getNote(id));
}));
router.get("/getMeta", (0, express_async_handler_1.default)(async (req, res) => {
    const { id, ws } = req.query;
    const engine = await (0, utils_1.getWSEngine)({ ws: ws || "" });
    common_server_1.ExpressUtils.setResponse(res, await engine.getNoteMeta(id));
}));
router.get("/bulkGet", (0, express_async_handler_1.default)(async (req, res) => {
    const { ids, ws } = req.query;
    const processedIdPayload = convertToArrayIfObject(ids);
    const engine = await (0, utils_1.getWSEngine)({ ws: ws || "" });
    common_server_1.ExpressUtils.setResponse(res, await engine.bulkGetNotes(processedIdPayload));
}));
router.get("/bulkGetMeta", (0, express_async_handler_1.default)(async (req, res) => {
    const { ids, ws } = req.query;
    const processedIdPayload = convertToArrayIfObject(ids);
    const engine = await (0, utils_1.getWSEngine)({ ws: ws || "" });
    common_server_1.ExpressUtils.setResponse(res, await engine.bulkGetNotesMeta(processedIdPayload));
}));
router.post("/delete", (0, express_async_handler_1.default)(async (req, res) => {
    const { ws, id, opts } = req.body;
    const engine = await (0, utils_1.getWSEngine)({ ws: ws || "" });
    common_server_1.ExpressUtils.setResponse(res, await engine.deleteNote(id, opts));
}));
router.get("/info", (0, express_async_handler_1.default)(async (_req, res) => {
    const resp = await notes_1.NoteController.instance().info();
    res.json(resp);
}));
router.post("/rename", (0, express_async_handler_1.default)(async (req, res) => {
    const resp = await notes_1.NoteController.instance().rename(req.body);
    common_server_1.ExpressUtils.setResponse(res, resp);
}));
router.post("/render", (0, express_async_handler_1.default)(async (req, res) => {
    const resp = await notes_1.NoteController.instance().render(req.body);
    common_server_1.ExpressUtils.setResponse(res, resp);
}));
router.get("/query", (0, express_async_handler_1.default)(async (req, res) => {
    const resp = await notes_1.NoteController.instance().query(req.query);
    common_server_1.ExpressUtils.setResponse(res, { data: resp });
}));
router.get("/queryMeta", (0, express_async_handler_1.default)(async (req, res) => {
    const resp = await notes_1.NoteController.instance().queryMeta(req.query);
    common_server_1.ExpressUtils.setResponse(res, { data: resp });
}));
router.post("/find", (0, express_async_handler_1.default)(async (req, res) => {
    const { ws, ...opts } = req.body;
    const engine = await (0, utils_1.getWSEngine)({ ws: ws || "" });
    const out = await engine.findNotes(opts);
    common_server_1.ExpressUtils.setResponse(res, { data: out });
}));
router.post("/findMeta", (0, express_async_handler_1.default)(async (req, res) => {
    const { ws, ...opts } = req.body;
    const engine = await (0, utils_1.getWSEngine)({ ws: ws || "" });
    const out = await engine.findNotesMeta(opts);
    common_server_1.ExpressUtils.setResponse(res, { data: out });
}));
router.post("/write", (0, express_async_handler_1.default)(async (req, res) => {
    const { ws, node, opts } = req.body;
    const engine = await (0, utils_1.getWSEngine)({ ws: ws || "" });
    const out = await engine.writeNote(node, opts);
    common_server_1.ExpressUtils.setResponse(res, out);
}));
router.post("/bulkAdd", (0, express_async_handler_1.default)(async (req, res) => {
    const { ws, opts } = req.body;
    if (!Array.isArray(opts.notes)) {
        opts.notes = Object.values(opts.notes);
    }
    const engine = await (0, utils_1.getWSEngine)({ ws: ws || "" });
    const out = await engine.bulkWriteNotes(opts);
    common_server_1.ExpressUtils.setResponse(res, out);
}));
router.get("/blocks", (0, express_async_handler_1.default)(async (req, res) => {
    const { id, ws, filterByAnchorType } = req.query;
    const engine = await (0, utils_1.getWSEngine)({ ws: ws || "" });
    common_server_1.ExpressUtils.setResponse(res, await engine.getNoteBlocks({ id, filterByAnchorType }));
}));
router.post("/decorations", (0, express_async_handler_1.default)(async (req, res) => {
    const opts = req.body;
    const { ws } = opts;
    const engine = await (0, utils_1.getWSEngine)({ ws: ws || "" });
    common_server_1.ExpressUtils.setResponse(res, await engine.getDecorations(opts));
}));
/**
 * Express will convert the ids array into an object if it exceeds the
 * 'arrayLimit' value set in the query parser (see {@link appModule}). In that
 * case, convert the object back to an array
 */
function convertToArrayIfObject(payload) {
    if (payload && !Array.isArray(payload)) {
        return Object.values(payload);
    }
    return payload;
}
//# sourceMappingURL=note.js.map