"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerOauthHandler = exports.oauthRouter = exports.OauthService = void 0;
const common_all_1 = require("@dendronhq/common-all");
const express_1 = require("express");
const express_async_handler_1 = __importDefault(require("express-async-handler"));
const core_1 = require("../core");
var OauthService;
(function (OauthService) {
    OauthService["GOOGLE"] = "google";
})(OauthService = exports.OauthService || (exports.OauthService = {}));
const router = (0, express_1.Router)();
exports.oauthRouter = router;
const oauthHandlers = {};
const L = (0, core_1.getLogger)();
const ctx = "oauth";
function registerOauthHandler(type, handler) {
    oauthHandlers[type.toString()] = handler;
}
exports.registerOauthHandler = registerOauthHandler;
router.get("/getToken", (0, express_async_handler_1.default)(async (req, res) => {
    var _a;
    L.info({ ctx, msg: "get:enter" });
    let resp;
    if (typeof req.query.service === "string" &&
        req.query.service in oauthHandlers) {
        resp = await oauthHandlers[req.query.service].getToken({
            code: req.query.code,
            connectionId: (_a = req.query) === null || _a === void 0 ? void 0 : _a.connectionId,
        });
    }
    else {
        throw new common_all_1.DendronError({
            message: "unsupported oauth client: " + req.query.service,
            code: common_all_1.StatusCodes.BAD_REQUEST,
        });
    }
    res.send(resp);
}));
router.get("/refreshToken", (0, express_async_handler_1.default)(async (req, res) => {
    var _a;
    L.info({ ctx, msg: "get:enter" });
    let resp;
    if (typeof req.query.service === "string" &&
        req.query.service in oauthHandlers) {
        resp = await oauthHandlers[req.query.service].refreshToken({
            refreshToken: req.query.refreshToken,
            connectionId: (_a = req.query) === null || _a === void 0 ? void 0 : _a.connectionId,
        });
    }
    else {
        throw new common_all_1.DendronError({
            message: "unsupported oauth client: " + req.query.service,
            code: common_all_1.StatusCodes.BAD_REQUEST,
        });
    }
    res.send(resp);
}));
//# sourceMappingURL=oauth.js.map