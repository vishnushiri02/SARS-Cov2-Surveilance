"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.appModule = void 0;
const common_all_1 = require("@dendronhq/common-all");
const common_server_1 = require("@dendronhq/common-server");
const Sentry = __importStar(require("@sentry/node"));
const cors_1 = __importDefault(require("cors"));
const express_1 = __importDefault(require("express"));
const express_async_handler_1 = __importDefault(require("express-async-handler"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const morgan_1 = __importDefault(require("morgan"));
const path_1 = __importDefault(require("path"));
const qs_1 = __importDefault(require("qs"));
const querystring_1 = __importDefault(require("querystring"));
const core_1 = require("./core");
const oauth_1 = require("./modules/oauth");
const routes_1 = require("./routes");
const oauth_2 = require("./routes/oauth");
function getSentryRelease() {
    return `${common_all_1.AppNames.EXPRESS_SERVER}@${common_server_1.NodeJSUtils.getVersionFromPkg()}`;
}
function appModule({ logPath, nextServerUrl, nextStaticRoot, googleOauthClientId, googleOauthClientSecret, }) {
    const ctx = "appModule:start";
    const logger = (0, core_1.getLogger)();
    const app = (0, express_1.default)();
    // Increase the size limit of arrays being parsed from query parameters. If
    // the number of items in the query string exceed 'arrayLimit', it gets
    // converted to an object instead of an array automatically.
    app.set("query parser", (str) => {
        return qs_1.default.parse(str, { arrayLimit: 1000 });
    });
    app.use((0, cors_1.default)());
    app.use(express_1.default.json({ limit: "500mb" }));
    app.use(express_1.default.urlencoded({ extended: true }));
    if (logPath !== "stdout") {
        const accessLogStream = fs_extra_1.default.createWriteStream(logPath, { flags: "a" });
        app.use((0, morgan_1.default)(":method :url :status :response-time ms - :res[content-length] - :req[content-length]", {
            stream: accessLogStream,
        }));
    }
    logger.info(googleOauthClientId);
    logger.info({ ctx, dirPath: __dirname });
    const staticDir = path_1.default.join(__dirname, "static");
    app.use(express_1.default.static(staticDir));
    // this is the first time we are accessing the segment client instance (when this is run as a separate process).
    // unlock Segment client.
    common_server_1.SegmentClient.unlock();
    if (!common_server_1.SegmentClient.instance().hasOptedOut && (0, common_all_1.getStage)() === "prod") {
        (0, common_server_1.initializeSentry)({ environment: (0, common_all_1.getStage)(), release: getSentryRelease() });
    }
    // Re-use the id for error reporting too:
    Sentry.setUser({ id: common_server_1.SegmentClient.instance().anonymousId });
    app.use(Sentry.Handlers.requestHandler());
    if (nextStaticRoot) {
        logger.info({ ctx, msg: "nextStaticRoot:add", nextStaticRoot });
        app.use(express_1.default.static(nextStaticRoot));
    }
    if (nextServerUrl) {
        logger.info({ ctx, msg: "adding nextServerUrl", nextServerUrl });
        app.use("/vscode", (req, res) => {
            const redirectUrl = nextServerUrl +
                "/vscode" +
                req.path.replace(/.html/, "") +
                "?" +
                querystring_1.default.stringify(req.query);
            logger.info({ ctx, msg: "redirecting", redirectUrl });
            return res.redirect(redirectUrl);
        });
    }
    app.get("/health", async (_req, res) => {
        return res.json({ ok: 1 });
    });
    app.get("/version", 
    // @ts-ignore
    (0, express_async_handler_1.default)(async (_req, res) => {
        const pkg = (0, common_server_1.findInParent)(__dirname, "package.json");
        if (!pkg) {
            throw Error("no pkg found");
        }
        const version = fs_extra_1.default.readJSONSync(path_1.default.join(pkg, "package.json")).version;
        return res.json({ version });
    }));
    (0, oauth_2.registerOauthHandler)(oauth_2.OauthService.GOOGLE, new oauth_1.GoogleAuthController(googleOauthClientId, googleOauthClientSecret));
    routes_1.baseRouter.use("/oauth", oauth_2.oauthRouter);
    app.use("/api", routes_1.baseRouter);
    // The error handler must be before any other error middleware and after all controllers
    // app.use(Sentry.Handlers.errorHandler() as express.ErrorRequestHandler);
    app.use(Sentry.Handlers.errorHandler({
        shouldHandleError() {
            // Upload all exceptions
            return true;
        },
    }));
    app.use((err, _req, res, _next) => {
        const flattenedError = (0, common_all_1.error2PlainObject)(err);
        logger.error({
            ctx: "appModule:ErrorHandler",
            error: flattenedError,
            nextStaticRoot,
        });
        return res.status(common_all_1.StatusCodes.INTERNAL_SERVER_ERROR).json(flattenedError);
    });
    return app;
}
exports.appModule = appModule;
//# sourceMappingURL=Server.js.map