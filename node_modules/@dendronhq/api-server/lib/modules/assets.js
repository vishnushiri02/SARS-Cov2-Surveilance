"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AssetsController = void 0;
const common_all_1 = require("@dendronhq/common-all");
const engine_server_1 = require("@dendronhq/engine-server");
const utils_1 = require("../utils");
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const core_1 = require("../core");
class AssetsController {
    static instance() {
        if (!AssetsController.singleton) {
            AssetsController.singleton = new AssetsController();
        }
        return AssetsController.singleton;
    }
    async get({ fpath, ws }) {
        const engine = await (0, utils_1.getWSEngine)({ ws });
        const { wsRoot, vaults } = engine;
        if (!engine_server_1.WorkspaceUtils.isPathInWorkspace({ wsRoot, vaults, fpath })) {
            return {
                error: common_all_1.DendronError.createFromStatus({
                    status: common_all_1.ERROR_STATUS.INVALID_CONFIG,
                    message: `fpath ${fpath} not inside a vault. wsRoot: ${wsRoot}, vaults: ${vaults
                        .map((v) => v.fsPath)
                        .join(", ")}`,
                }),
            };
        }
        if (!fs_extra_1.default.existsSync(fpath)) {
            return {
                error: common_all_1.DendronError.createFromStatus({
                    status: common_all_1.ERROR_STATUS.DOES_NOT_EXIST,
                    message: `fpath ${fpath} does not exist`,
                }),
            };
        }
        return {
            data: fpath,
            error: null,
        };
    }
    async getTheme({ themeTarget, themeType, }) {
        const ctx = "Assets:getTheme";
        const stage = (0, common_all_1.getStage)();
        const logger = (0, core_1.getLogger)();
        logger.info({ ctx, themeTarget, themeType, stage });
        let root;
        if (stage !== "prod") {
            // lib/modules/
            root = path_1.default.join(__dirname, "..", "..", "assets");
        }
        else {
            root = __dirname;
        }
        const getPathForTarget = ({ themeTarget, }) => {
            const themeDir = path_1.default.join(root, "static", "themes");
            if (themeTarget === common_all_1.ThemeTarget.PRISM) {
                return path_1.default.join(themeDir, "prism");
            }
            return common_all_1.DendronError.createFromStatus({
                status: common_all_1.ERROR_STATUS.INVALID_CONFIG,
                message: `target ${themeTarget} not valid`,
            });
        };
        const getFileForType = ({ themeType, targetRoot, }) => {
            return path_1.default.join(targetRoot, `${themeType.toLowerCase()}.css`);
        };
        const targetRoot = getPathForTarget({ themeTarget });
        if (targetRoot instanceof common_all_1.DendronError) {
            return { error: targetRoot };
        }
        const pathForTarget = getFileForType({ themeType, targetRoot });
        logger.info({ ctx, pathForTarget });
        if (!fs_extra_1.default.existsSync(pathForTarget)) {
            return {
                error: common_all_1.DendronError.createFromStatus({
                    status: common_all_1.ERROR_STATUS.DOES_NOT_EXIST,
                    message: `no file at ${pathForTarget}`,
                }),
            };
        }
        return {
            data: pathForTarget,
            error: null,
        };
    }
}
exports.AssetsController = AssetsController;
//# sourceMappingURL=assets.js.map