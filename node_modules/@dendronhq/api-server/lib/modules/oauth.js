"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GoogleAuthController = void 0;
const common_all_1 = require("@dendronhq/common-all");
const common_server_1 = require("@dendronhq/common-server");
const axios_1 = __importDefault(require("axios"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const lodash_1 = __importDefault(require("lodash"));
const path_1 = __importDefault(require("path"));
const memoryStore_1 = require("../store/memoryStore");
class GoogleAuthController {
    constructor(clientId, clientSecret) {
        this.clientId = clientId;
        this.clientSecret = clientSecret;
    }
    async getToken(opts) {
        const { code, connectionId } = opts;
        const engine = memoryStore_1.MemoryStore.instance().getEngine();
        const { wsRoot } = engine;
        // getToken reads url from browser and filters the req query params,
        // It receives string value `undefined` from req.query when the connectionId is set as undefined
        const configPath = !lodash_1.default.isEqual(connectionId, "undefined")
            ? path_1.default.join(wsRoot, "pods", "service-connections", `svcconfig.${connectionId}.yml`)
            : path_1.default.join(wsRoot, "pods", "dendron.gdoc", "config.import.yml");
        const port = await fs_extra_1.default.readFile(path_1.default.join(wsRoot, ".dendron.port"), {
            encoding: "utf8",
        });
        let resp;
        const { data } = await (0, axios_1.default)({
            url: `https://oauth2.googleapis.com/token`,
            method: "post",
            data: {
                client_id: this.clientId,
                client_secret: this.clientSecret,
                redirect_uri: `http://localhost:${port}/api/oauth/getToken?service=google&connectionId=${connectionId}`,
                grant_type: "authorization_code",
                code,
            },
        });
        if (!lodash_1.default.isEmpty(data)) {
            const opts = {
                path: configPath,
                tokens: {
                    accessToken: data.access_token,
                    refreshToken: data.refresh_token,
                    expirationTime: common_all_1.Time.now().toSeconds() + data.expires_in - 300,
                },
            };
            this.addAccessTokensToPodConfig(opts);
            resp =
                "Authorization completed. Please return to your workspace and then run the pod again. Please specify vaultName in config.import.yml if you are running the import pod. You can now close this window.";
        }
        else {
            throw new common_all_1.DendronError({
                message: "Failed to get a token response from Google Authentication Service",
                severity: common_all_1.ERROR_SEVERITY.MINOR,
            });
        }
        return resp;
    }
    async refreshToken(opts) {
        const { refreshToken, connectionId } = opts;
        const engine = memoryStore_1.MemoryStore.instance().getEngine();
        const { wsRoot } = engine;
        const port = await fs_extra_1.default.readFile(path_1.default.join(wsRoot, ".dendron.port"), {
            encoding: "utf8",
        });
        let resp;
        const { data } = await (0, axios_1.default)({
            url: `https://oauth2.googleapis.com/token`,
            method: "post",
            data: {
                client_id: this.clientId,
                client_secret: this.clientSecret,
                redirect_uri: `http://localhost:${port}/api/oauth/getToken?service=google&connectionId=${connectionId}`,
                grant_type: "refresh_token",
                refresh_token: refreshToken,
            },
        });
        if (!lodash_1.default.isEmpty(data)) {
            const opts = {
                path: !lodash_1.default.isUndefined(connectionId)
                    ? path_1.default.join(wsRoot, "pods", "service-connections", `svcconfig.${connectionId}.yml`)
                    : path_1.default.join(wsRoot, "pods", "dendron.gdoc", "config.import.yml"),
                tokens: {
                    accessToken: data.access_token,
                    // expiration time of token is set to 55mins from now.
                    expirationTime: common_all_1.Time.now().toSeconds() + data.expires_in - 300,
                },
            };
            this.addAccessTokensToPodConfig(opts);
            resp = data.access_token;
        }
        return resp;
    }
    async addAccessTokensToPodConfig(opts) {
        const { path, tokens } = opts;
        const { accessToken, refreshToken, expirationTime } = tokens;
        let podConfig = (0, common_server_1.readYAML)(path);
        podConfig = {
            ...podConfig,
            accessToken,
            expirationTime,
        };
        if (!lodash_1.default.isUndefined(refreshToken)) {
            podConfig = {
                ...podConfig,
                refreshToken,
            };
        }
        (0, common_server_1.writeYAML)(path, podConfig);
    }
}
exports.GoogleAuthController = GoogleAuthController;
//# sourceMappingURL=oauth.js.map