import * as zod from 'zod';
import { joinPath } from './utils/joinPath';
export class ValidationError extends Error {
    constructor(message, options){
        super(message);
        this.details = options.details;
    }
}
export function fromZodError(zodError) {
    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    const { maxIssuesInMessage =99 , issueSeparator ='; ' , prefixSeparator =': ' , prefix ='Validation error' ,  } = options;
    const reason = zodError.errors// limit max number of issues printed in the reason section
    .slice(0, maxIssuesInMessage)// format error message
    .map((issue)=>{
        const { message , path  } = issue;
        if (path.length > 0) {
            return `${message} at "${joinPath(path)}"`;
        }
        return message;
    })// concat as string
    .join(issueSeparator);
    const message1 = reason ? [
        prefix,
        reason
    ].join(prefixSeparator) : prefix;
    return new ValidationError(message1, {
        details: zodError.errors
    });
}
export const toValidationError = function() {
    let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    return (err)=>{
        if (err instanceof zod.ZodError) {
            return fromZodError(err, options);
        }
        if (err instanceof Error) {
            return err;
        }
        return new Error('Unknown error');
    };
};
export function isValidationError(err) {
    return err instanceof ValidationError;
}
