"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.fromZodError = fromZodError;
exports.isValidationError = isValidationError;
exports.toValidationError = void 0;
var swcHelpers = require("@swc/helpers");
var zod = swcHelpers.interopRequireWildcard(require("zod"));
var _joinPath = require("./utils/joinPath");
class ValidationError extends Error {
    constructor(message, options){
        super(message);
        this.details = options.details;
    }
}
exports.ValidationError = ValidationError;
function fromZodError(zodError, options = {}) {
    const { maxIssuesInMessage =99 , issueSeparator ='; ' , prefixSeparator =': ' , prefix ='Validation error' ,  } = options;
    const reason = zodError.errors// limit max number of issues printed in the reason section
    .slice(0, maxIssuesInMessage)// format error message
    .map((issue)=>{
        const { message , path  } = issue;
        if (path.length > 0) {
            return `${message} at "${(0, _joinPath).joinPath(path)}"`;
        }
        return message;
    })// concat as string
    .join(issueSeparator);
    const message1 = reason ? [
        prefix,
        reason
    ].join(prefixSeparator) : prefix;
    return new ValidationError(message1, {
        details: zodError.errors
    });
}
const toValidationError = (options = {})=>(err)=>{
        if (err instanceof zod.ZodError) {
            return fromZodError(err, options);
        }
        if (err instanceof Error) {
            return err;
        }
        return new Error('Unknown error');
    }
;
exports.toValidationError = toValidationError;
function isValidationError(err) {
    return err instanceof ValidationError;
}
