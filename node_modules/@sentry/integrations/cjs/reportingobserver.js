Object.defineProperty(exports, '__esModule', { value: true });

var utils = require('@sentry/utils');

/** Reporting API integration - https://w3c.github.io/reporting/ */
class ReportingObserver  {
  /**
   * @inheritDoc
   */
   static __initStatic() {this.id = 'ReportingObserver';}

  /**
   * @inheritDoc
   */
    __init() {this.name = ReportingObserver.id;}

  /**
   * Returns current hub.
   */
  

  /**
   * @inheritDoc
   */
   constructor(
      _options

 = {
      types: ['crash', 'deprecation', 'intervention'],
    },
  ) {;this._options = _options;ReportingObserver.prototype.__init.call(this);}

  /**
   * @inheritDoc
   */
   setupOnce(_, getCurrentHub) {
    if (!utils.supportsReportingObserver()) {
      return;
    }

    this._getCurrentHub = getCurrentHub;

        var observer = new (utils.getGlobalObject().ReportingObserver)(this.handler.bind(this), {
      buffered: true,
      types: this._options.types,
    });

        observer.observe();
  }

  /**
   * @inheritDoc
   */
   handler(reports) {
    var hub = this._getCurrentHub && this._getCurrentHub();
    if (!hub || !hub.getIntegration(ReportingObserver)) {
      return;
    }
    for (var report of reports) {
      hub.withScope(scope => {
        scope.setExtra('url', report.url);

        var label = `ReportingObserver [${report.type}]`;
        let details = 'No details available';

        if (report.body) {
          // Object.keys doesn't work on ReportBody, as all properties are inheirted
          var plainBody

 = {};

                    for (var prop in report.body) {
            plainBody[prop] = report.body[prop];
          }

          scope.setExtra('body', plainBody);

          if (report.type === 'crash') {
            var body = report.body ;
            // A fancy way to create a message out of crashId OR reason OR both OR fallback
            details = [body.crashId || '', body.reason || ''].join(' ').trim() || details;
          } else {
            var body = report.body ;
            details = body.message || details;
          }
        }

        hub.captureMessage(`${label}: ${details}`);
      });
    }
  }
} ReportingObserver.__initStatic();

exports.ReportingObserver = ReportingObserver;
//# sourceMappingURL=reportingobserver.js.map
